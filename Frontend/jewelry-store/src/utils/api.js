import { getAccessToken, isTokenExpired, refreshAccessToken } from "./auth";

export const apiRequest = async (url, options = {}) => {
    console.log("üåç [api] Chu·∫©n b·ªã g·ªçi API:", url);

    let token = getAccessToken();

    if (!token) {
        console.warn("‚ùå [api] Kh√¥ng t√¨m th·∫•y access token trong localStorage!");
        throw new Error("No token found");
    }

    if (isTokenExpired(token)) {
        console.warn("‚ö†Ô∏è [api] Token h·∫øt h·∫°n, ƒëang refresh...");
        token = await refreshAccessToken();
        if (!token) {
            console.error("‚ùå [api] Refresh token th·∫•t b·∫°i!");
            throw new Error("Token refresh failed");
        }
    }

    console.log("üöÄ [api] G·ª≠i request v·ªõi token:", token.substring(0, 20) + "...");

    const response = await fetch(url, {
        ...options,
        headers: {
            ...options.headers,
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
        },
    });

    console.log("üì¶ [api] Ph·∫£n h·ªìi t·ª´ server:", response.status);

    if (response.status === 401) {
        console.error("‚õî [api] 401 Unauthorized ‚Üí logout ng∆∞·ªùi d√πng.");
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        window.location.href = "/login";
        throw new Error("Unauthorized");
    }

    const data = await response.json();
    console.log("‚úÖ [api] D·ªØ li·ªáu tr·∫£ v·ªÅ:", data);
    return data;
};
