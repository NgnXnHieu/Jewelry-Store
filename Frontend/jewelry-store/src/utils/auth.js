import { jwtDecode } from "jwt-decode";

export const getAccessToken = () => {
    const token = localStorage.getItem("token");
    console.log("üîë [auth] L·∫•y access token:", token ? "‚úÖ C√≥ token" : "‚ùå Kh√¥ng c√≥ token");
    return token;
};

export const getRefreshToken = () => {
    const token = localStorage.getItem("refreshToken");
    console.log("üîÅ [auth] L·∫•y refresh token:", token ? "‚úÖ C√≥ token" : "‚ùå Kh√¥ng c√≥ token");
    return token;
};

export const isTokenExpired = (token) => {
    try {
        const decoded = jwtDecode(token);
        const expired = decoded.exp * 1000 < Date.now();
        console.log(
            expired
                ? "‚ö†Ô∏è [auth] Token ƒë√£ h·∫øt h·∫°n!"
                : "‚úÖ [auth] Token c√≤n h·∫°n s·ª≠ d·ª•ng.",
            decoded
        );
        return expired;
    } catch (err) {
        console.error("‚ùå [auth] L·ªói gi·∫£i m√£ token:", err);
        return true;
    }
};

export const refreshAccessToken = async () => {
    const refreshToken = getRefreshToken();
    if (!refreshToken) {
        console.warn("‚ö†Ô∏è [auth] Kh√¥ng c√≥ refresh token ƒë·ªÉ l√†m m·ªõi.");
        return null;
    }

    console.log("üîÑ [auth] G·ª≠i y√™u c·∫ßu refresh token...");

    try {
        const response = await fetch("http://localhost:8080/api/refresh", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ refreshToken }),
        });

        console.log("üì° [auth] K·∫øt qu·∫£ response refresh:", response.status);

        if (!response.ok) throw new Error("Refresh token failed");
        const data = await response.json();
        console.log("‚úÖ [auth] Refresh token th√†nh c√¥ng:", data);

        localStorage.setItem("token", data.accessToken);
        return data.accessToken;
    } catch (err) {
        console.error("‚ùå [auth] Kh√¥ng th·ªÉ refresh token:", err);
        localStorage.removeItem("token");
        localStorage.removeItem("refreshToken");
        return null;
    }
};
export function getUsernameFromToken() {
    const token = getAccessToken();
    if (!token) return null;

    try {
        const decoded = jwtDecode(token);
        console.log("üîç [auth] Token payload:", decoded);
        return decoded.sub || decoded.username || null;
    } catch (err) {
        console.error("‚ùå [auth] Kh√¥ng decode ƒë∆∞·ª£c token:", err);
        return null;
    }
}